// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: protobuf/plane.watch.interchange.proto

package export

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AltitudeUnits int32

const (
	AltitudeUnits_FEET   AltitudeUnits = 0
	AltitudeUnits_METRES AltitudeUnits = 1
)

// Enum value maps for AltitudeUnits.
var (
	AltitudeUnits_name = map[int32]string{
		0: "FEET",
		1: "METRES",
	}
	AltitudeUnits_value = map[string]int32{
		"FEET":   0,
		"METRES": 1,
	}
)

func (x AltitudeUnits) Enum() *AltitudeUnits {
	p := new(AltitudeUnits)
	*p = x
	return p
}

func (x AltitudeUnits) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AltitudeUnits) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_plane_watch_interchange_proto_enumTypes[0].Descriptor()
}

func (AltitudeUnits) Type() protoreflect.EnumType {
	return &file_protobuf_plane_watch_interchange_proto_enumTypes[0]
}

func (x AltitudeUnits) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AltitudeUnits.Descriptor instead.
func (AltitudeUnits) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_plane_watch_interchange_proto_rawDescGZIP(), []int{0}
}

type FlightStatus int32

const (
	FlightStatus_NormalAirborne          FlightStatus = 0
	FlightStatus_NormalOnGround          FlightStatus = 1
	FlightStatus_AlertAirborne           FlightStatus = 2
	FlightStatus_AlertOnGround           FlightStatus = 3
	FlightStatus_AlertSpecialPositionId  FlightStatus = 4
	FlightStatus_NormalSpecialPositionId FlightStatus = 5
	FlightStatus_Value6Unassigned        FlightStatus = 6
	FlightStatus_Value7Unassigned        FlightStatus = 7
)

// Enum value maps for FlightStatus.
var (
	FlightStatus_name = map[int32]string{
		0: "NormalAirborne",
		1: "NormalOnGround",
		2: "AlertAirborne",
		3: "AlertOnGround",
		4: "AlertSpecialPositionId",
		5: "NormalSpecialPositionId",
		6: "Value6Unassigned",
		7: "Value7Unassigned",
	}
	FlightStatus_value = map[string]int32{
		"NormalAirborne":          0,
		"NormalOnGround":          1,
		"AlertAirborne":           2,
		"AlertOnGround":           3,
		"AlertSpecialPositionId":  4,
		"NormalSpecialPositionId": 5,
		"Value6Unassigned":        6,
		"Value7Unassigned":        7,
	}
)

func (x FlightStatus) Enum() *FlightStatus {
	p := new(FlightStatus)
	*p = x
	return p
}

func (x FlightStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlightStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_plane_watch_interchange_proto_enumTypes[1].Descriptor()
}

func (FlightStatus) Type() protoreflect.EnumType {
	return &file_protobuf_plane_watch_interchange_proto_enumTypes[1]
}

func (x FlightStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlightStatus.Descriptor instead.
func (FlightStatus) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_plane_watch_interchange_proto_rawDescGZIP(), []int{1}
}

type AirframeType int32

const (
	AirframeType_CODE_00_NO_ADSB                   AirframeType = 0  // No ADS-B Emitter Category Information
	AirframeType_CODE_01_LIGHT                     AirframeType = 1  // "Light (< 15500 lbs)",
	AirframeType_CODE_02_SMALL                     AirframeType = 2  // "Small (15500 to 75000 lbs)",
	AirframeType_CODE_03_LARGE                     AirframeType = 3  // "Large (75000 to 300000 lbs)",
	AirframeType_CODE_04_HIGH_VORTEX               AirframeType = 4  // "High Vortex Large (aircraft such as B-757)",
	AirframeType_CODE_05_HEAVY                     AirframeType = 5  // "Heavy (> 300000 lbs)",
	AirframeType_CODE_06_HIGH_PERFORMANCE          AirframeType = 6  // "High Performance (> 5g acceleration and 400 kts)",
	AirframeType_CODE_07_ROTORCRAFT                AirframeType = 7  // "Rotorcraft",
	AirframeType_CODE_10_NO_ADSB                   AirframeType = 10 // "No ADS-B Emitter Category Information",
	AirframeType_CODE_11_GLIDER_SAILPLANE          AirframeType = 11 // "Glider / sailplane",
	AirframeType_CODE_12_LIGHTER_THAN_AIR          AirframeType = 12 // "Lighter-than-air",
	AirframeType_CODE_13_PARACHUTIST               AirframeType = 13 // "Parachutist / Skydiver",
	AirframeType_CODE_14_ULTRALIGHT                AirframeType = 14 // "Ultralight / hang-glider / paraglider",
	AirframeType_CODE_15_RESERVED                  AirframeType = 15 // "Reserved",
	AirframeType_CODE_16_UAV                       AirframeType = 16 // "Unmanned Aerial Vehicle",
	AirframeType_CODE_17_TRANS_ATMO                AirframeType = 17 // "Space / Trans-atmospheric vehicle",
	AirframeType_CODE_20_NO_ADSB                   AirframeType = 20 // "No ADS-B Emitter Category Information",
	AirframeType_CODE_21_SURFACE_EMERGENCY_VEHICLE AirframeType = 21 // "Surface Vehicle – Emergency Vehicle",
	AirframeType_CODE_22_SURFACE_VEHICLE           AirframeType = 22 // "Surface Vehicle – Service Vehicle",
	AirframeType_CODE_23_POINT_OBSTACLE            AirframeType = 23 // "Point Obstacle (includes tethered balloons)",
	AirframeType_CODE_24_CLUSTER_OBSTACLE          AirframeType = 24 // "Cluster Obstacle",
	AirframeType_CODE_25_LINE_OBSTACLE             AirframeType = 25 // "Line Obstacle",
	AirframeType_CODE_26_RESERVED                  AirframeType = 26 // "Reserved",
	AirframeType_CODE_27_RESERVED                  AirframeType = 27 // "Reserved",
	AirframeType_CODE_30_RESERVED                  AirframeType = 30 // "Reserved",
	AirframeType_CODE_31_RESERVED                  AirframeType = 31 // "Reserved",
	AirframeType_CODE_32_RESERVED                  AirframeType = 32 // "Reserved",
	AirframeType_CODE_33_RESERVED                  AirframeType = 33 // "Reserved",
	AirframeType_CODE_34_RESERVED                  AirframeType = 34 // "Reserved",
	AirframeType_CODE_35_RESERVED                  AirframeType = 35 // "Reserved",
	AirframeType_CODE_36_RESERVED                  AirframeType = 36 // "Reserved",
	AirframeType_CODE_37_RESERVED                  AirframeType = 37 // "Reserved",
	AirframeType_UNKNOWN                           AirframeType = 99
)

// Enum value maps for AirframeType.
var (
	AirframeType_name = map[int32]string{
		0:  "CODE_00_NO_ADSB",
		1:  "CODE_01_LIGHT",
		2:  "CODE_02_SMALL",
		3:  "CODE_03_LARGE",
		4:  "CODE_04_HIGH_VORTEX",
		5:  "CODE_05_HEAVY",
		6:  "CODE_06_HIGH_PERFORMANCE",
		7:  "CODE_07_ROTORCRAFT",
		10: "CODE_10_NO_ADSB",
		11: "CODE_11_GLIDER_SAILPLANE",
		12: "CODE_12_LIGHTER_THAN_AIR",
		13: "CODE_13_PARACHUTIST",
		14: "CODE_14_ULTRALIGHT",
		15: "CODE_15_RESERVED",
		16: "CODE_16_UAV",
		17: "CODE_17_TRANS_ATMO",
		20: "CODE_20_NO_ADSB",
		21: "CODE_21_SURFACE_EMERGENCY_VEHICLE",
		22: "CODE_22_SURFACE_VEHICLE",
		23: "CODE_23_POINT_OBSTACLE",
		24: "CODE_24_CLUSTER_OBSTACLE",
		25: "CODE_25_LINE_OBSTACLE",
		26: "CODE_26_RESERVED",
		27: "CODE_27_RESERVED",
		30: "CODE_30_RESERVED",
		31: "CODE_31_RESERVED",
		32: "CODE_32_RESERVED",
		33: "CODE_33_RESERVED",
		34: "CODE_34_RESERVED",
		35: "CODE_35_RESERVED",
		36: "CODE_36_RESERVED",
		37: "CODE_37_RESERVED",
		99: "UNKNOWN",
	}
	AirframeType_value = map[string]int32{
		"CODE_00_NO_ADSB":                   0,
		"CODE_01_LIGHT":                     1,
		"CODE_02_SMALL":                     2,
		"CODE_03_LARGE":                     3,
		"CODE_04_HIGH_VORTEX":               4,
		"CODE_05_HEAVY":                     5,
		"CODE_06_HIGH_PERFORMANCE":          6,
		"CODE_07_ROTORCRAFT":                7,
		"CODE_10_NO_ADSB":                   10,
		"CODE_11_GLIDER_SAILPLANE":          11,
		"CODE_12_LIGHTER_THAN_AIR":          12,
		"CODE_13_PARACHUTIST":               13,
		"CODE_14_ULTRALIGHT":                14,
		"CODE_15_RESERVED":                  15,
		"CODE_16_UAV":                       16,
		"CODE_17_TRANS_ATMO":                17,
		"CODE_20_NO_ADSB":                   20,
		"CODE_21_SURFACE_EMERGENCY_VEHICLE": 21,
		"CODE_22_SURFACE_VEHICLE":           22,
		"CODE_23_POINT_OBSTACLE":            23,
		"CODE_24_CLUSTER_OBSTACLE":          24,
		"CODE_25_LINE_OBSTACLE":             25,
		"CODE_26_RESERVED":                  26,
		"CODE_27_RESERVED":                  27,
		"CODE_30_RESERVED":                  30,
		"CODE_31_RESERVED":                  31,
		"CODE_32_RESERVED":                  32,
		"CODE_33_RESERVED":                  33,
		"CODE_34_RESERVED":                  34,
		"CODE_35_RESERVED":                  35,
		"CODE_36_RESERVED":                  36,
		"CODE_37_RESERVED":                  37,
		"UNKNOWN":                           99,
	}
)

func (x AirframeType) Enum() *AirframeType {
	p := new(AirframeType)
	*p = x
	return p
}

func (x AirframeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AirframeType) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_plane_watch_interchange_proto_enumTypes[2].Descriptor()
}

func (AirframeType) Type() protoreflect.EnumType {
	return &file_protobuf_plane_watch_interchange_proto_enumTypes[2]
}

func (x AirframeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AirframeType.Descriptor instead.
func (AirframeType) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_plane_watch_interchange_proto_rawDescGZIP(), []int{2}
}

type FieldUpdates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=Location,proto3" json:"Location,omitempty"`
	Altitude     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=Altitude,proto3" json:"Altitude,omitempty"`
	Velocity     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=Velocity,proto3" json:"Velocity,omitempty"`
	Heading      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=Heading,proto3" json:"Heading,omitempty"`
	OnGround     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=OnGround,proto3" json:"OnGround,omitempty"`
	VerticalRate *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=VerticalRate,proto3" json:"VerticalRate,omitempty"`
	FlightStatus *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=FlightStatus,proto3" json:"FlightStatus,omitempty"`
	Special      *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=Special,proto3" json:"Special,omitempty"`
	Squawk       *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=Squawk,proto3" json:"Squawk,omitempty"`
}

func (x *FieldUpdates) Reset() {
	*x = FieldUpdates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_plane_watch_interchange_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldUpdates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldUpdates) ProtoMessage() {}

func (x *FieldUpdates) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_plane_watch_interchange_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldUpdates.ProtoReflect.Descriptor instead.
func (*FieldUpdates) Descriptor() ([]byte, []int) {
	return file_protobuf_plane_watch_interchange_proto_rawDescGZIP(), []int{0}
}

func (x *FieldUpdates) GetLocation() *timestamppb.Timestamp {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *FieldUpdates) GetAltitude() *timestamppb.Timestamp {
	if x != nil {
		return x.Altitude
	}
	return nil
}

func (x *FieldUpdates) GetVelocity() *timestamppb.Timestamp {
	if x != nil {
		return x.Velocity
	}
	return nil
}

func (x *FieldUpdates) GetHeading() *timestamppb.Timestamp {
	if x != nil {
		return x.Heading
	}
	return nil
}

func (x *FieldUpdates) GetOnGround() *timestamppb.Timestamp {
	if x != nil {
		return x.OnGround
	}
	return nil
}

func (x *FieldUpdates) GetVerticalRate() *timestamppb.Timestamp {
	if x != nil {
		return x.VerticalRate
	}
	return nil
}

func (x *FieldUpdates) GetFlightStatus() *timestamppb.Timestamp {
	if x != nil {
		return x.FlightStatus
	}
	return nil
}

func (x *FieldUpdates) GetSpecial() *timestamppb.Timestamp {
	if x != nil {
		return x.Special
	}
	return nil
}

func (x *FieldUpdates) GetSquawk() *timestamppb.Timestamp {
	if x != nil {
		return x.Squawk
	}
	return nil
}

type PlaneSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	ICAOCode string `protobuf:"bytes,2,opt,name=ICAOCode,proto3" json:"ICAOCode,omitempty"`
}

func (x *PlaneSegment) Reset() {
	*x = PlaneSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_plane_watch_interchange_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaneSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaneSegment) ProtoMessage() {}

func (x *PlaneSegment) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_plane_watch_interchange_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaneSegment.ProtoReflect.Descriptor instead.
func (*PlaneSegment) Descriptor() ([]byte, []int) {
	return file_protobuf_plane_watch_interchange_proto_rawDescGZIP(), []int{1}
}

func (x *PlaneSegment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlaneSegment) GetICAOCode() string {
	if x != nil {
		return x.ICAOCode
	}
	return ""
}

type PlaneLocationPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the ICAO Identifier for this AirFrame
	Icao uint32 `protobuf:"varint,3,opt,name=Icao,proto3" json:"Icao,omitempty"`
	// Current Latitude
	Lat float64 `protobuf:"fixed64,4,opt,name=Lat,proto3" json:"Lat,omitempty"`
	// Current Longitude
	Lon float64 `protobuf:"fixed64,5,opt,name=Lon,proto3" json:"Lon,omitempty"`
	// Current Heading (not track)
	Heading float64 `protobuf:"fixed64,6,opt,name=Heading,proto3" json:"Heading,omitempty"`
	// Current Velocity
	Velocity float64 `protobuf:"fixed64,7,opt,name=Velocity,proto3" json:"Velocity,omitempty"`
	// Current Altitude
	Altitude int32 `protobuf:"varint,8,opt,name=Altitude,proto3" json:"Altitude,omitempty"`
	// How fast this aircraft is going up or down
	VerticalRate int32 `protobuf:"zigzag32,9,opt,name=VerticalRate,proto3" json:"VerticalRate,omitempty"`
	// meters or feet
	AltitudeUnits AltitudeUnits `protobuf:"varint,10,opt,name=AltitudeUnits,proto3,enum=plane_watch.AltitudeUnits" json:"AltitudeUnits,omitempty"`
	// The Aircraft current flight status
	FlightStatus FlightStatus `protobuf:"varint,11,opt,name=FlightStatus,proto3,enum=plane_watch.FlightStatus" json:"FlightStatus,omitempty"`
	// If this aircraft is on the ground or not
	OnGround bool `protobuf:"varint,12,opt,name=OnGround,proto3" json:"OnGround,omitempty"`
	// The type of Airframe this aircraft has (code)
	AirframeType AirframeType `protobuf:"varint,14,opt,name=AirframeType,proto3,enum=plane_watch.AirframeType" json:"AirframeType,omitempty"`
	// if this source has seen a frame that tells its altitude
	HasAltitude bool `protobuf:"varint,15,opt,name=HasAltitude,proto3" json:"HasAltitude,omitempty"`
	// if this source has seen a frame that tells its location
	HasLocation bool `protobuf:"varint,16,opt,name=HasLocation,proto3" json:"HasLocation,omitempty"`
	// if this source has seen a frame that tells its heading
	HasHeading bool `protobuf:"varint,17,opt,name=HasHeading,proto3" json:"HasHeading,omitempty"`
	// if this source has seen a frame that tells its OnGround status
	HasOnGround bool `protobuf:"varint,18,opt,name=HasOnGround,proto3" json:"HasOnGround,omitempty"`
	// if this source has seen a frame that tells its Flight Status
	HasFlightStatus bool `protobuf:"varint,19,opt,name=HasFlightStatus,proto3" json:"HasFlightStatus,omitempty"`
	// if this source has seen a frame that tells its Vertical Rate
	HasVerticalRate bool `protobuf:"varint,20,opt,name=HasVerticalRate,proto3" json:"HasVerticalRate,omitempty"`
	// if this source has seen a frame that tells its Velocity
	HasVelocity bool `protobuf:"varint,21,opt,name=HasVelocity,proto3" json:"HasVelocity,omitempty"`
	// The source sending this update
	SourceTag string `protobuf:"bytes,22,opt,name=SourceTag,proto3" json:"SourceTag,omitempty"`
	// The flights current Squawk
	Squawk uint32 `protobuf:"varint,23,opt,name=Squawk,proto3" json:"Squawk,omitempty"`
	// if the aircraft has set any "special" status
	Special string `protobuf:"bytes,24,opt,name=Special,proto3" json:"Special,omitempty"`
	// Which tile this aircraft is on
	TileLocation string `protobuf:"bytes,25,opt,name=TileLocation,proto3" json:"TileLocation,omitempty"`
	// who has sent messages for this plane, updated by pw_router
	SourceTags map[string]uint32 `protobuf:"bytes,26,rep,name=SourceTags,proto3" json:"SourceTags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// TrackedSince is when we first started tracking this aircraft *this time*
	TrackedSince *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=TrackedSince,proto3" json:"TrackedSince,omitempty"`
	// LastMsg is the last time we heard from this aircraft
	LastMsg *timestamppb.Timestamp `protobuf:"bytes,28,opt,name=LastMsg,proto3" json:"LastMsg,omitempty"`
	// Updates contains the list of individual fields that contain updated time stamps for various fields
	Updates *FieldUpdates `protobuf:"bytes,29,opt,name=Updates,proto3" json:"Updates,omitempty"`
	// for the given source, the signal strength of the last frame received
	SignalRssi float64 `protobuf:"fixed64,30,opt,name=SignalRssi,proto3" json:"SignalRssi,omitempty"`
	// how wide the aircraft has reported itself being
	AircraftWidth float32 `protobuf:"fixed32,31,opt,name=AircraftWidth,proto3" json:"AircraftWidth,omitempty"`
	// how long the aircraft has reported itself being
	AircraftLength float32 `protobuf:"fixed32,32,opt,name=AircraftLength,proto3" json:"AircraftLength,omitempty"`
	// Enrichment Plane data
	Registration    string `protobuf:"bytes,34,opt,name=Registration,proto3" json:"Registration,omitempty"`
	TypeCode        string `protobuf:"bytes,35,opt,name=TypeCode,proto3" json:"TypeCode,omitempty"`
	TypeCodeLong    string `protobuf:"bytes,36,opt,name=TypeCodeLong,proto3" json:"TypeCodeLong,omitempty"`
	Serial          string `protobuf:"bytes,37,opt,name=Serial,proto3" json:"Serial,omitempty"`
	RegisteredOwner string `protobuf:"bytes,38,opt,name=RegisteredOwner,proto3" json:"RegisteredOwner,omitempty"`
	COFAOwner       string `protobuf:"bytes,39,opt,name=COFAOwner,proto3" json:"COFAOwner,omitempty"`
	EngineType      string `protobuf:"bytes,40,opt,name=EngineType,proto3" json:"EngineType,omitempty"`
	FlagCode        string `protobuf:"bytes,41,opt,name=FlagCode,proto3" json:"FlagCode,omitempty"`
	// Enrichment Route Data
	CallSign  string          `protobuf:"bytes,42,opt,name=CallSign,proto3" json:"CallSign,omitempty"`
	Operator  string          `protobuf:"bytes,43,opt,name=Operator,proto3" json:"Operator,omitempty"`
	RouteCode string          `protobuf:"bytes,44,opt,name=RouteCode,proto3" json:"RouteCode,omitempty"`
	Segments  []*PlaneSegment `protobuf:"bytes,45,rep,name=Segments,proto3" json:"Segments,omitempty"`
}

func (x *PlaneLocationPB) Reset() {
	*x = PlaneLocationPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_plane_watch_interchange_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaneLocationPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaneLocationPB) ProtoMessage() {}

func (x *PlaneLocationPB) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_plane_watch_interchange_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaneLocationPB.ProtoReflect.Descriptor instead.
func (*PlaneLocationPB) Descriptor() ([]byte, []int) {
	return file_protobuf_plane_watch_interchange_proto_rawDescGZIP(), []int{2}
}

func (x *PlaneLocationPB) GetIcao() uint32 {
	if x != nil {
		return x.Icao
	}
	return 0
}

func (x *PlaneLocationPB) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *PlaneLocationPB) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *PlaneLocationPB) GetHeading() float64 {
	if x != nil {
		return x.Heading
	}
	return 0
}

func (x *PlaneLocationPB) GetVelocity() float64 {
	if x != nil {
		return x.Velocity
	}
	return 0
}

func (x *PlaneLocationPB) GetAltitude() int32 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *PlaneLocationPB) GetVerticalRate() int32 {
	if x != nil {
		return x.VerticalRate
	}
	return 0
}

func (x *PlaneLocationPB) GetAltitudeUnits() AltitudeUnits {
	if x != nil {
		return x.AltitudeUnits
	}
	return AltitudeUnits_FEET
}

func (x *PlaneLocationPB) GetFlightStatus() FlightStatus {
	if x != nil {
		return x.FlightStatus
	}
	return FlightStatus_NormalAirborne
}

func (x *PlaneLocationPB) GetOnGround() bool {
	if x != nil {
		return x.OnGround
	}
	return false
}

func (x *PlaneLocationPB) GetAirframeType() AirframeType {
	if x != nil {
		return x.AirframeType
	}
	return AirframeType_CODE_00_NO_ADSB
}

func (x *PlaneLocationPB) GetHasAltitude() bool {
	if x != nil {
		return x.HasAltitude
	}
	return false
}

func (x *PlaneLocationPB) GetHasLocation() bool {
	if x != nil {
		return x.HasLocation
	}
	return false
}

func (x *PlaneLocationPB) GetHasHeading() bool {
	if x != nil {
		return x.HasHeading
	}
	return false
}

func (x *PlaneLocationPB) GetHasOnGround() bool {
	if x != nil {
		return x.HasOnGround
	}
	return false
}

func (x *PlaneLocationPB) GetHasFlightStatus() bool {
	if x != nil {
		return x.HasFlightStatus
	}
	return false
}

func (x *PlaneLocationPB) GetHasVerticalRate() bool {
	if x != nil {
		return x.HasVerticalRate
	}
	return false
}

func (x *PlaneLocationPB) GetHasVelocity() bool {
	if x != nil {
		return x.HasVelocity
	}
	return false
}

func (x *PlaneLocationPB) GetSourceTag() string {
	if x != nil {
		return x.SourceTag
	}
	return ""
}

func (x *PlaneLocationPB) GetSquawk() uint32 {
	if x != nil {
		return x.Squawk
	}
	return 0
}

func (x *PlaneLocationPB) GetSpecial() string {
	if x != nil {
		return x.Special
	}
	return ""
}

func (x *PlaneLocationPB) GetTileLocation() string {
	if x != nil {
		return x.TileLocation
	}
	return ""
}

func (x *PlaneLocationPB) GetSourceTags() map[string]uint32 {
	if x != nil {
		return x.SourceTags
	}
	return nil
}

func (x *PlaneLocationPB) GetTrackedSince() *timestamppb.Timestamp {
	if x != nil {
		return x.TrackedSince
	}
	return nil
}

func (x *PlaneLocationPB) GetLastMsg() *timestamppb.Timestamp {
	if x != nil {
		return x.LastMsg
	}
	return nil
}

func (x *PlaneLocationPB) GetUpdates() *FieldUpdates {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *PlaneLocationPB) GetSignalRssi() float64 {
	if x != nil {
		return x.SignalRssi
	}
	return 0
}

func (x *PlaneLocationPB) GetAircraftWidth() float32 {
	if x != nil {
		return x.AircraftWidth
	}
	return 0
}

func (x *PlaneLocationPB) GetAircraftLength() float32 {
	if x != nil {
		return x.AircraftLength
	}
	return 0
}

func (x *PlaneLocationPB) GetRegistration() string {
	if x != nil {
		return x.Registration
	}
	return ""
}

func (x *PlaneLocationPB) GetTypeCode() string {
	if x != nil {
		return x.TypeCode
	}
	return ""
}

func (x *PlaneLocationPB) GetTypeCodeLong() string {
	if x != nil {
		return x.TypeCodeLong
	}
	return ""
}

func (x *PlaneLocationPB) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

func (x *PlaneLocationPB) GetRegisteredOwner() string {
	if x != nil {
		return x.RegisteredOwner
	}
	return ""
}

func (x *PlaneLocationPB) GetCOFAOwner() string {
	if x != nil {
		return x.COFAOwner
	}
	return ""
}

func (x *PlaneLocationPB) GetEngineType() string {
	if x != nil {
		return x.EngineType
	}
	return ""
}

func (x *PlaneLocationPB) GetFlagCode() string {
	if x != nil {
		return x.FlagCode
	}
	return ""
}

func (x *PlaneLocationPB) GetCallSign() string {
	if x != nil {
		return x.CallSign
	}
	return ""
}

func (x *PlaneLocationPB) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *PlaneLocationPB) GetRouteCode() string {
	if x != nil {
		return x.RouteCode
	}
	return ""
}

func (x *PlaneLocationPB) GetSegments() []*PlaneSegment {
	if x != nil {
		return x.Segments
	}
	return nil
}

type PlaneLocations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaneLocation []*PlaneLocationPB `protobuf:"bytes,1,rep,name=PlaneLocation,proto3" json:"PlaneLocation,omitempty"`
}

func (x *PlaneLocations) Reset() {
	*x = PlaneLocations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_plane_watch_interchange_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaneLocations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaneLocations) ProtoMessage() {}

func (x *PlaneLocations) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_plane_watch_interchange_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaneLocations.ProtoReflect.Descriptor instead.
func (*PlaneLocations) Descriptor() ([]byte, []int) {
	return file_protobuf_plane_watch_interchange_proto_rawDescGZIP(), []int{3}
}

func (x *PlaneLocations) GetPlaneLocation() []*PlaneLocationPB {
	if x != nil {
		return x.PlaneLocation
	}
	return nil
}

var File_protobuf_plane_watch_interchange_proto protoreflect.FileDescriptor

var file_protobuf_plane_watch_interchange_proto_rawDesc = []byte{
	0x0a, 0x26, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x04, 0x0a, 0x0c, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x36, 0x0a, 0x08, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x41,
	0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x56, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x34, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x48, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x08, 0x4f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x4f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3e, 0x0a,
	0x0c, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0c, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a,
	0x0c, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0c, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a,
	0x07, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x06, 0x53, 0x71, 0x75, 0x61, 0x77, 0x6b, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x06, 0x53, 0x71, 0x75, 0x61, 0x77, 0x6b, 0x22, 0x3e, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49,
	0x43, 0x41, 0x4f, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49,
	0x43, 0x41, 0x4f, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xbe, 0x0c, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x6e,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x12, 0x12, 0x0a, 0x04, 0x49,
	0x63, 0x61, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x49, 0x63, 0x61, 0x6f, 0x12,
	0x10, 0x0a, 0x03, 0x4c, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x4c, 0x61,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x4c, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a,
	0x08, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x6c, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x41, 0x6c, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x52, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0c, 0x56, 0x65, 0x72,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x41, 0x6c, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x41,
	0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x0d, 0x41, 0x6c,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x46,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x46, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x41, 0x69, 0x72, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x41, 0x69, 0x72, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x41, 0x69, 0x72, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x61, 0x73, 0x41, 0x6c, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x48, 0x61, 0x73, 0x41,
	0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x61, 0x73, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x48, 0x61,
	0x73, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x61, 0x73,
	0x48, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x48,
	0x61, 0x73, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x61, 0x73,
	0x4f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x48, 0x61, 0x73, 0x4f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x48,
	0x61, 0x73, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x48, 0x61, 0x73, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x48, 0x61, 0x73, 0x56, 0x65, 0x72, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x48, 0x61, 0x73, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x48, 0x61, 0x73, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x48, 0x61, 0x73, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x67, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x71, 0x75, 0x61, 0x77, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x53, 0x71, 0x75, 0x61, 0x77, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x61, 0x67, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x61, 0x67, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x69,
	0x6e, 0x63, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x69,
	0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x33, 0x0a, 0x07, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x73, 0x73, 0x69, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x73, 0x73, 0x69, 0x12, 0x24,
	0x0a, 0x0d, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x20, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x41, 0x69,
	0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x6e, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x4f, 0x46, 0x41, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x4f, 0x46, 0x41, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x43, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x43, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x2d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x08, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x54, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x6e,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x50, 0x6c,
	0x61, 0x6e, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52,
	0x0d, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x25,
	0x0a, 0x0d, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12,
	0x08, 0x0a, 0x04, 0x46, 0x45, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x54,
	0x52, 0x45, 0x53, 0x10, 0x01, 0x2a, 0xc1, 0x01, 0x0a, 0x0c, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x41, 0x69, 0x72, 0x62, 0x6f, 0x72, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x4f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x41, 0x69, 0x72, 0x62, 0x6f, 0x72, 0x6e, 0x65, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x10, 0x04,
	0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x10, 0x05, 0x12, 0x14, 0x0a,
	0x10, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x36, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x37, 0x55, 0x6e, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x10, 0x07, 0x2a, 0x96, 0x06, 0x0a, 0x0c, 0x41, 0x69,
	0x72, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x30, 0x30, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x44, 0x53, 0x42, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x30, 0x31, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x30, 0x32, 0x5f, 0x53, 0x4d,
	0x41, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x30, 0x33,
	0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x30, 0x34, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x56, 0x4f, 0x52, 0x54, 0x45, 0x58, 0x10,
	0x04, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x30, 0x35, 0x5f, 0x48, 0x45, 0x41,
	0x56, 0x59, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x30, 0x36, 0x5f,
	0x48, 0x49, 0x47, 0x48, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x43, 0x45,
	0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x30, 0x37, 0x5f, 0x52, 0x4f,
	0x54, 0x4f, 0x52, 0x43, 0x52, 0x41, 0x46, 0x54, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x31, 0x30, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x44, 0x53, 0x42, 0x10, 0x0a, 0x12,
	0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x31, 0x31, 0x5f, 0x47, 0x4c, 0x49, 0x44, 0x45,
	0x52, 0x5f, 0x53, 0x41, 0x49, 0x4c, 0x50, 0x4c, 0x41, 0x4e, 0x45, 0x10, 0x0b, 0x12, 0x1c, 0x0a,
	0x18, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x31, 0x32, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x45, 0x52,
	0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x41, 0x49, 0x52, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x31, 0x33, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x43, 0x48, 0x55, 0x54, 0x49,
	0x53, 0x54, 0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x31, 0x34, 0x5f,
	0x55, 0x4c, 0x54, 0x52, 0x41, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x0e, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x31, 0x35, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44,
	0x10, 0x0f, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x31, 0x36, 0x5f, 0x55, 0x41,
	0x56, 0x10, 0x10, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x31, 0x37, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x5f, 0x41, 0x54, 0x4d, 0x4f, 0x10, 0x11, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x32, 0x30, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x44, 0x53, 0x42, 0x10, 0x14,
	0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x32, 0x31, 0x5f, 0x53, 0x55, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x5f, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x56, 0x45,
	0x48, 0x49, 0x43, 0x4c, 0x45, 0x10, 0x15, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x32, 0x32, 0x5f, 0x53, 0x55, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x56, 0x45, 0x48, 0x49, 0x43,
	0x4c, 0x45, 0x10, 0x16, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x32, 0x33, 0x5f,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x4f, 0x42, 0x53, 0x54, 0x41, 0x43, 0x4c, 0x45, 0x10, 0x17,
	0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x32, 0x34, 0x5f, 0x43, 0x4c, 0x55, 0x53,
	0x54, 0x45, 0x52, 0x5f, 0x4f, 0x42, 0x53, 0x54, 0x41, 0x43, 0x4c, 0x45, 0x10, 0x18, 0x12, 0x19,
	0x0a, 0x15, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x32, 0x35, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4f,
	0x42, 0x53, 0x54, 0x41, 0x43, 0x4c, 0x45, 0x10, 0x19, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x32, 0x36, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x1a, 0x12,
	0x14, 0x0a, 0x10, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x32, 0x37, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x44, 0x10, 0x1b, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x33, 0x30,
	0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x1e, 0x12, 0x14, 0x0a, 0x10, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x33, 0x31, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10,
	0x1f, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x33, 0x32, 0x5f, 0x52, 0x45, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x20, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x33, 0x33, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x21, 0x12, 0x14, 0x0a,
	0x10, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x33, 0x34, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x44, 0x10, 0x22, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x33, 0x35, 0x5f, 0x52,
	0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x23, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x33, 0x36, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x24, 0x12,
	0x14, 0x0a, 0x10, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x33, 0x37, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x44, 0x10, 0x25, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x63, 0x42, 0x0c, 0x5a, 0x0a, 0x6c, 0x69, 0x62, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protobuf_plane_watch_interchange_proto_rawDescOnce sync.Once
	file_protobuf_plane_watch_interchange_proto_rawDescData = file_protobuf_plane_watch_interchange_proto_rawDesc
)

func file_protobuf_plane_watch_interchange_proto_rawDescGZIP() []byte {
	file_protobuf_plane_watch_interchange_proto_rawDescOnce.Do(func() {
		file_protobuf_plane_watch_interchange_proto_rawDescData = protoimpl.X.CompressGZIP(file_protobuf_plane_watch_interchange_proto_rawDescData)
	})
	return file_protobuf_plane_watch_interchange_proto_rawDescData
}

var file_protobuf_plane_watch_interchange_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_protobuf_plane_watch_interchange_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_protobuf_plane_watch_interchange_proto_goTypes = []interface{}{
	(AltitudeUnits)(0),            // 0: plane_watch.AltitudeUnits
	(FlightStatus)(0),             // 1: plane_watch.FlightStatus
	(AirframeType)(0),             // 2: plane_watch.AirframeType
	(*FieldUpdates)(nil),          // 3: plane_watch.FieldUpdates
	(*PlaneSegment)(nil),          // 4: plane_watch.PlaneSegment
	(*PlaneLocationPB)(nil),       // 5: plane_watch.PlaneLocationPB
	(*PlaneLocations)(nil),        // 6: plane_watch.PlaneLocations
	nil,                           // 7: plane_watch.PlaneLocationPB.SourceTagsEntry
	(*timestamppb.Timestamp)(nil), // 8: google.protobuf.Timestamp
}
var file_protobuf_plane_watch_interchange_proto_depIdxs = []int32{
	8,  // 0: plane_watch.FieldUpdates.Location:type_name -> google.protobuf.Timestamp
	8,  // 1: plane_watch.FieldUpdates.Altitude:type_name -> google.protobuf.Timestamp
	8,  // 2: plane_watch.FieldUpdates.Velocity:type_name -> google.protobuf.Timestamp
	8,  // 3: plane_watch.FieldUpdates.Heading:type_name -> google.protobuf.Timestamp
	8,  // 4: plane_watch.FieldUpdates.OnGround:type_name -> google.protobuf.Timestamp
	8,  // 5: plane_watch.FieldUpdates.VerticalRate:type_name -> google.protobuf.Timestamp
	8,  // 6: plane_watch.FieldUpdates.FlightStatus:type_name -> google.protobuf.Timestamp
	8,  // 7: plane_watch.FieldUpdates.Special:type_name -> google.protobuf.Timestamp
	8,  // 8: plane_watch.FieldUpdates.Squawk:type_name -> google.protobuf.Timestamp
	0,  // 9: plane_watch.PlaneLocationPB.AltitudeUnits:type_name -> plane_watch.AltitudeUnits
	1,  // 10: plane_watch.PlaneLocationPB.FlightStatus:type_name -> plane_watch.FlightStatus
	2,  // 11: plane_watch.PlaneLocationPB.AirframeType:type_name -> plane_watch.AirframeType
	7,  // 12: plane_watch.PlaneLocationPB.SourceTags:type_name -> plane_watch.PlaneLocationPB.SourceTagsEntry
	8,  // 13: plane_watch.PlaneLocationPB.TrackedSince:type_name -> google.protobuf.Timestamp
	8,  // 14: plane_watch.PlaneLocationPB.LastMsg:type_name -> google.protobuf.Timestamp
	3,  // 15: plane_watch.PlaneLocationPB.Updates:type_name -> plane_watch.FieldUpdates
	4,  // 16: plane_watch.PlaneLocationPB.Segments:type_name -> plane_watch.PlaneSegment
	5,  // 17: plane_watch.PlaneLocations.PlaneLocation:type_name -> plane_watch.PlaneLocationPB
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_protobuf_plane_watch_interchange_proto_init() }
func file_protobuf_plane_watch_interchange_proto_init() {
	if File_protobuf_plane_watch_interchange_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protobuf_plane_watch_interchange_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldUpdates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_plane_watch_interchange_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaneSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_plane_watch_interchange_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaneLocationPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_plane_watch_interchange_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaneLocations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protobuf_plane_watch_interchange_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protobuf_plane_watch_interchange_proto_goTypes,
		DependencyIndexes: file_protobuf_plane_watch_interchange_proto_depIdxs,
		EnumInfos:         file_protobuf_plane_watch_interchange_proto_enumTypes,
		MessageInfos:      file_protobuf_plane_watch_interchange_proto_msgTypes,
	}.Build()
	File_protobuf_plane_watch_interchange_proto = out.File
	file_protobuf_plane_watch_interchange_proto_rawDesc = nil
	file_protobuf_plane_watch_interchange_proto_goTypes = nil
	file_protobuf_plane_watch_interchange_proto_depIdxs = nil
}
